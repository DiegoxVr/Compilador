
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 26 21:24:48 CDT 2021
//----------------------------------------------------

package programa;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 26 21:24:48 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\017\000\002\002" +
    "\016\000\002\002\020\000\002\002\020\000\002\002\021" +
    "\000\002\002\017\000\002\002\017\000\002\002\017\000" +
    "\002\002\020\000\002\002\016\000\002\002\016\000\002" +
    "\002\015\000\002\017\006\000\002\017\011\000\002\017" +
    "\007\000\002\015\014\000\002\015\014\000\002\015\013" +
    "\000\002\015\013\000\002\015\012\000\002\015\011\000" +
    "\002\015\011\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\005\000\002\003\004\000\002\003\004\000\002" +
    "\003\003\000\002\004\005\000\002\004\007\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\010" +
    "\000\002\004\010\000\002\004\011\000\002\004\011\000" +
    "\002\004\007\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\004\011\000\002\004\011\000\002\004" +
    "\006\000\002\004\006\000\002\004\007\000\002\004\010" +
    "\000\002\004\007\000\002\004\007\000\002\016\023\000" +
    "\002\016\025\000\002\016\024\000\002\016\031\000\002" +
    "\016\033\000\002\016\032\000\002\006\011\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\006\000\002\013\007\000\002\013\015\000" +
    "\002\013\015\000\002\013\015\000\002\013\016\000\002" +
    "\013\017\000\002\013\015\000\002\013\015\000\002\013" +
    "\015\000\002\013\016\000\002\013\017\000\002\013\015" +
    "\000\002\013\015\000\002\013\015\000\002\013\016\000" +
    "\002\013\017\000\002\013\016\000\002\013\016\000\002" +
    "\013\016\000\002\013\017\000\002\013\020\000\002\013" +
    "\017\000\002\013\017\000\002\013\017\000\002\013\020" +
    "\000\002\013\021\000\002\007\015\000\002\010\011\000" +
    "\002\011\013\000\002\012\011\000\002\014\012\000\002" +
    "\014\011\000\002\005\005\000\002\005\004\000\002\005" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019f\000\004\037\004\001\002\000\004\031\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\012\006\013\007\014\037\012\042\011\001\002\000" +
    "\004\042\u0187\001\002\000\004\006\111\001\002\000\004" +
    "\015\076\001\002\000\006\025\036\037\037\001\002\000" +
    "\004\037\015\001\002\000\006\015\017\024\016\001\002" +
    "\000\004\005\030\001\002\000\006\005\020\037\021\001" +
    "\002\000\006\005\023\037\024\001\002\000\004\036\022" +
    "\001\002\000\032\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\025\uffc6\032\uffc6\037\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\001\002\000\004\036\027\001\002\000\004\005" +
    "\025\001\002\000\004\036\026\001\002\000\032\006\uffd2" +
    "\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\025\uffd2\032" +
    "\uffd2\037\uffd2\042\uffd2\043\uffd2\044\uffd2\001\002\000\032" +
    "\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\025" +
    "\uffd4\032\uffd4\037\uffd4\042\uffd4\043\uffd4\044\uffd4\001\002" +
    "\000\006\005\031\037\032\001\002\000\004\036\035\001" +
    "\002\000\004\005\033\001\002\000\004\036\034\001\002" +
    "\000\032\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\025\uffd3\032\uffd3\037\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\001\002\000\032\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\025\uffd5\032\uffd5\037\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\001\002\000\004\037\074\001\002\000\012\015" +
    "\043\024\040\025\042\036\041\001\002\000\004\040\072" +
    "\001\002\000\032\006\uffda\007\uffda\010\uffda\012\uffda\013" +
    "\uffda\014\uffda\025\uffda\032\uffda\037\uffda\042\uffda\043\uffda" +
    "\044\uffda\001\002\000\004\036\071\001\002\000\010\026" +
    "\045\037\046\040\044\001\002\000\004\036\070\001\002" +
    "\000\004\036\067\001\002\000\016\016\053\017\052\020" +
    "\054\021\047\036\050\050\051\001\002\000\004\037\065" +
    "\001\002\000\032\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\025\uffc7\032\uffc7\037\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\001\002\000\004\037\063\001\002\000\004\037" +
    "\061\001\002\000\004\037\057\001\002\000\004\037\055" +
    "\001\002\000\004\036\056\001\002\000\032\006\uffce\007" +
    "\uffce\010\uffce\012\uffce\013\uffce\014\uffce\025\uffce\032\uffce" +
    "\037\uffce\042\uffce\043\uffce\044\uffce\001\002\000\004\036" +
    "\060\001\002\000\032\006\uffd0\007\uffd0\010\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\025\uffd0\032\uffd0\037\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\001\002\000\004\036\062\001\002\000\032" +
    "\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\025" +
    "\uffcf\032\uffcf\037\uffcf\042\uffcf\043\uffcf\044\uffcf\001\002" +
    "\000\004\036\064\001\002\000\032\006\uffcc\007\uffcc\010" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\025\uffcc\032\uffcc\037\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\001\002\000\004\036\066\001" +
    "\002\000\032\006\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\025\uffcd\032\uffcd\037\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\001\002\000\032\006\uffd1\007\uffd1\010\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\025\uffd1\032\uffd1\037\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\001\002\000\032\006\uffd8\007\uffd8\010\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\025\uffd8\032\uffd8\037\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\001\002\000\032\006\uffd7\007\uffd7" +
    "\010\uffd7\012\uffd7\013\uffd7\014\uffd7\025\uffd7\032\uffd7\037" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\001\002\000\004\036\073" +
    "\001\002\000\032\006\uffd9\007\uffd9\010\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\025\uffd9\032\uffd9\037\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\001\002\000\004\036\075\001\002\000\032\006" +
    "\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\025\uffd6" +
    "\032\uffd6\037\uffd6\042\uffd6\043\uffd6\044\uffd6\001\002\000" +
    "\010\005\100\037\101\040\077\001\002\000\004\036\110" +
    "\001\002\000\006\005\103\037\104\001\002\000\004\036" +
    "\102\001\002\000\032\006\uffcb\007\uffcb\010\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\025\uffcb\032\uffcb\037\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\001\002\000\004\036\107\001\002\000\004" +
    "\005\105\001\002\000\004\036\106\001\002\000\032\006" +
    "\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\025\uffc8" +
    "\032\uffc8\037\uffc8\042\uffc8\043\uffc8\044\uffc8\001\002\000" +
    "\032\006\uffc9\007\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\025\uffc9\032\uffc9\037\uffc9\042\uffc9\043\uffc9\044\uffc9\001" +
    "\002\000\032\006\uffca\007\uffca\010\uffca\012\uffca\013\uffca" +
    "\014\uffca\025\uffca\032\uffca\037\uffca\042\uffca\043\uffca\044" +
    "\uffca\001\002\000\004\035\112\001\002\000\004\027\113" +
    "\001\002\000\004\030\114\001\002\000\004\031\115\001" +
    "\002\000\024\006\013\007\014\010\131\012\133\013\135" +
    "\014\116\025\130\037\124\043\132\001\002\000\004\027" +
    "\u0171\001\002\000\026\006\013\007\014\010\131\012\133" +
    "\013\135\014\116\025\130\032\u0167\037\157\043\132\001" +
    "\002\000\030\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\025\uffe3\032\uffe3\037\uffe3\043\uffe3\044\uffe3\001" +
    "\002\000\026\006\013\007\014\010\131\012\133\013\135" +
    "\014\116\025\130\032\u0146\037\124\043\132\001\002\000" +
    "\030\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\025\uffe9\032\uffe9\037\uffe9\043\uffe9\044\uffe9\001\002\000" +
    "\030\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\025\uffdb\032\uffdb\037\uffdb\043\uffdb\044\uffdb\001\002\000" +
    "\012\015\076\024\160\025\161\027\u013b\001\002\000\030" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\025" +
    "\uffe7\032\uffe7\037\uffe7\043\uffe7\044\uffe7\001\002\000\030" +
    "\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\025" +
    "\uffe5\032\uffe5\037\uffe5\043\uffe5\044\uffe5\001\002\000\030" +
    "\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\025" +
    "\uffe1\032\uffe1\037\uffe1\043\uffe1\044\uffe1\001\002\000\004" +
    "\037\u013a\001\002\000\004\027\u0130\001\002\000\004\027" +
    "\344\001\002\000\004\031\334\001\002\000\004\036\333" +
    "\001\002\000\004\027\137\001\002\000\030\006\uffdf\007" +
    "\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\025\uffdf\032\uffdf" +
    "\037\uffdf\043\uffdf\044\uffdf\001\002\000\010\026\142\027" +
    "\140\037\143\001\002\000\004\037\175\001\002\000\004" +
    "\030\154\001\002\000\006\030\uffbe\036\uffbe\001\002\000" +
    "\004\023\144\001\002\000\012\005\146\026\147\037\150" +
    "\040\145\001\002\000\006\030\uffbc\036\uffbc\001\002\000" +
    "\006\005\151\037\152\001\002\000\006\030\uffbd\036\uffbd" +
    "\001\002\000\006\030\uffbb\036\uffbb\001\002\000\006\030" +
    "\uffba\036\uffba\001\002\000\004\005\153\001\002\000\006" +
    "\030\uffb9\036\uffb9\001\002\000\004\031\155\001\002\000" +
    "\024\006\013\007\014\010\131\012\133\013\135\014\116" +
    "\025\130\037\157\043\132\001\002\000\026\006\013\007" +
    "\014\010\131\012\133\013\135\014\116\025\130\032\167" +
    "\037\157\043\132\001\002\000\010\015\076\024\160\025" +
    "\161\001\002\000\004\040\162\001\002\000\006\030\uff98" +
    "\036\uff98\001\002\000\006\030\uff99\036\uff99\001\002\000" +
    "\030\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\025\uffe4\032\uffe4\037\uffe4\043\uffe4\044\uffe4\001\002\000" +
    "\030\006\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea" +
    "\025\uffea\032\uffea\037\uffea\043\uffea\044\uffea\001\002\000" +
    "\030\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\025\uffdc\032\uffdc\037\uffdc\043\uffdc\044\uffdc\001\002\000" +
    "\030\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\025\uffe8\032\uffe8\037\uffe8\043\uffe8\044\uffe8\001\002\000" +
    "\030\006\uff9e\007\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\025\uff9e\032\uff9e\037\uff9e\043\uff9e\044\uff9e\001\002\000" +
    "\030\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\025\uffe6\032\uffe6\037\uffe6\043\uffe6\044\uffe6\001\002\000" +
    "\030\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\025\uffe2\032\uffe2\037\uffe2\043\uffe2\044\uffe2\001\002\000" +
    "\004\036\174\001\002\000\030\006\uffe0\007\uffe0\010\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\025\uffe0\032\uffe0\037\uffe0\043" +
    "\uffe0\044\uffe0\001\002\000\030\006\uffde\007\uffde\010\uffde" +
    "\012\uffde\013\uffde\014\uffde\025\uffde\032\uffde\037\uffde\043" +
    "\uffde\044\uffde\001\002\000\004\023\176\001\002\000\012" +
    "\005\200\026\201\037\202\040\177\001\002\000\004\030" +
    "\312\001\002\000\006\005\245\037\246\001\002\000\004" +
    "\030\224\001\002\000\004\030\203\001\002\000\004\022" +
    "\204\001\002\000\004\027\205\001\002\000\004\037\206" +
    "\001\002\000\004\023\207\001\002\000\012\005\211\026" +
    "\212\037\213\040\210\001\002\000\004\030\223\001\002" +
    "\000\006\005\216\037\217\001\002\000\004\030\215\001" +
    "\002\000\004\030\214\001\002\000\006\030\uffac\036\uffac" +
    "\001\002\000\006\030\uffae\036\uffae\001\002\000\004\030" +
    "\222\001\002\000\004\005\220\001\002\000\004\030\221" +
    "\001\002\000\006\030\uffaa\036\uffaa\001\002\000\006\030" +
    "\uffab\036\uffab\001\002\000\006\030\uffad\036\uffad\001\002" +
    "\000\004\022\225\001\002\000\004\027\226\001\002\000" +
    "\004\037\227\001\002\000\004\023\230\001\002\000\012" +
    "\005\232\026\233\037\234\040\231\001\002\000\004\030" +
    "\244\001\002\000\006\005\237\037\240\001\002\000\004" +
    "\030\236\001\002\000\004\030\235\001\002\000\006\030" +
    "\uffb6\036\uffb6\001\002\000\006\030\uffb8\036\uffb8\001\002" +
    "\000\004\030\243\001\002\000\004\005\241\001\002\000" +
    "\004\030\242\001\002\000\006\030\uffb4\036\uffb4\001\002" +
    "\000\006\030\uffb5\036\uffb5\001\002\000\006\030\uffb7\036" +
    "\uffb7\001\002\000\004\030\271\001\002\000\004\005\247" +
    "\001\002\000\004\030\250\001\002\000\004\022\251\001" +
    "\002\000\004\027\252\001\002\000\004\037\253\001\002" +
    "\000\004\023\254\001\002\000\012\005\256\026\257\037" +
    "\260\040\255\001\002\000\004\030\270\001\002\000\006" +
    "\005\263\037\264\001\002\000\004\030\262\001\002\000" +
    "\004\030\261\001\002\000\006\030\uffa2\036\uffa2\001\002" +
    "\000\006\030\uffa4\036\uffa4\001\002\000\004\030\267\001" +
    "\002\000\004\005\265\001\002\000\004\030\266\001\002" +
    "\000\006\030\uffa0\036\uffa0\001\002\000\006\030\uffa1\036" +
    "\uffa1\001\002\000\006\030\uffa3\036\uffa3\001\002\000\004" +
    "\022\272\001\002\000\004\027\273\001\002\000\004\037" +
    "\274\001\002\000\004\023\275\001\002\000\012\005\277" +
    "\026\300\037\301\040\276\001\002\000\004\030\311\001" +
    "\002\000\006\005\304\037\305\001\002\000\004\030\303" +
    "\001\002\000\004\030\302\001\002\000\006\030\uffa7\036" +
    "\uffa7\001\002\000\006\030\uffa9\036\uffa9\001\002\000\004" +
    "\030\310\001\002\000\004\005\306\001\002\000\004\030" +
    "\307\001\002\000\006\030\uffa5\036\uffa5\001\002\000\006" +
    "\030\uffa6\036\uffa6\001\002\000\006\030\uffa8\036\uffa8\001" +
    "\002\000\004\022\313\001\002\000\004\027\314\001\002" +
    "\000\004\037\315\001\002\000\004\023\316\001\002\000" +
    "\012\005\320\026\321\037\322\040\317\001\002\000\004" +
    "\030\332\001\002\000\006\005\325\037\326\001\002\000" +
    "\004\030\324\001\002\000\004\030\323\001\002\000\006" +
    "\030\uffb1\036\uffb1\001\002\000\006\030\uffb3\036\uffb3\001" +
    "\002\000\004\030\331\001\002\000\004\005\327\001\002" +
    "\000\004\030\330\001\002\000\006\030\uffaf\036\uffaf\001" +
    "\002\000\006\030\uffb0\036\uffb0\001\002\000\006\030\uffb2" +
    "\036\uffb2\001\002\000\030\006\uffdd\007\uffdd\010\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\025\uffdd\032\uffdd\037\uffdd\043\uffdd" +
    "\044\uffdd\001\002\000\024\006\013\007\014\010\131\012" +
    "\133\013\135\014\116\025\130\037\157\043\132\001\002" +
    "\000\026\006\013\007\014\010\131\012\133\013\135\014" +
    "\116\025\130\032\336\037\157\043\132\001\002\000\004" +
    "\013\337\001\002\000\004\027\340\001\002\000\010\026" +
    "\142\027\140\037\143\001\002\000\004\030\342\001\002" +
    "\000\004\036\343\001\002\000\030\006\uff9d\007\uff9d\010" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\025\uff9d\032\uff9d\037\uff9d" +
    "\043\uff9d\044\uff9d\001\002\000\004\037\345\001\002\000" +
    "\004\030\346\001\002\000\004\031\347\001\002\000\004" +
    "\045\350\001\002\000\006\005\352\040\351\001\002\000" +
    "\004\047\u011a\001\002\000\006\005\353\037\354\001\002" +
    "\000\004\047\u0104\001\002\000\004\005\355\001\002\000" +
    "\004\047\356\001\002\000\024\006\013\007\014\010\131" +
    "\012\133\013\135\014\116\025\130\037\157\043\132\001" +
    "\002\000\026\006\013\007\014\010\131\012\133\013\135" +
    "\014\116\025\130\037\157\043\132\044\360\001\002\000" +
    "\004\036\361\001\002\000\006\045\363\046\362\001\002" +
    "\000\004\047\377\001\002\000\004\040\364\001\002\000" +
    "\004\047\365\001\002\000\024\006\013\007\014\010\131" +
    "\012\133\013\135\014\116\025\130\037\157\043\132\001" +
    "\002\000\026\006\013\007\014\010\131\012\133\013\135" +
    "\014\116\025\130\037\157\043\132\044\367\001\002\000" +
    "\004\036\370\001\002\000\004\046\371\001\002\000\004" +
    "\047\372\001\002\000\024\006\013\007\014\010\131\012" +
    "\133\013\135\014\116\025\130\037\157\043\132\001\002" +
    "\000\026\006\013\007\014\010\131\012\133\013\135\014" +
    "\116\025\130\037\157\043\132\044\374\001\002\000\004" +
    "\036\375\001\002\000\004\032\376\001\002\000\030\006" +
    "\uffc1\007\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\025\uffc1" +
    "\032\uffc1\037\uffc1\043\uffc1\044\uffc1\001\002\000\024\006" +
    "\013\007\014\010\131\012\133\013\135\014\116\025\130" +
    "\037\157\043\132\001\002\000\026\006\013\007\014\010" +
    "\131\012\133\013\135\014\116\025\130\037\157\043\132" +
    "\044\u0101\001\002\000\004\036\u0102\001\002\000\004\032" +
    "\u0103\001\002\000\030\006\uffc4\007\uffc4\010\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\025\uffc4\032\uffc4\037\uffc4\043\uffc4\044" +
    "\uffc4\001\002\000\024\006\013\007\014\010\131\012\133" +
    "\013\135\014\116\025\130\037\157\043\132\001\002\000" +
    "\026\006\013\007\014\010\131\012\133\013\135\014\116" +
    "\025\130\037\157\043\132\044\u0106\001\002\000\004\036" +
    "\u0107\001\002\000\006\045\u0109\046\u0108\001\002\000\004" +
    "\047\u0115\001\002\000\004\040\u010a\001\002\000\004\047" +
    "\u010b\001\002\000\024\006\013\007\014\010\131\012\133" +
    "\013\135\014\116\025\130\037\157\043\132\001\002\000" +
    "\026\006\013\007\014\010\131\012\133\013\135\014\116" +
    "\025\130\037\157\043\132\044\u010d\001\002\000\004\036" +
    "\u010e\001\002\000\004\046\u010f\001\002\000\004\047\u0110" +
    "\001\002\000\024\006\013\007\014\010\131\012\133\013" +
    "\135\014\116\025\130\037\157\043\132\001\002\000\026" +
    "\006\013\007\014\010\131\012\133\013\135\014\116\025" +
    "\130\037\157\043\132\044\u0112\001\002\000\004\036\u0113" +
    "\001\002\000\004\032\u0114\001\002\000\030\006\uffc0\007" +
    "\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\025\uffc0\032\uffc0" +
    "\037\uffc0\043\uffc0\044\uffc0\001\002\000\024\006\013\007" +
    "\014\010\131\012\133\013\135\014\116\025\130\037\157" +
    "\043\132\001\002\000\026\006\013\007\014\010\131\012" +
    "\133\013\135\014\116\025\130\037\157\043\132\044\u0117" +
    "\001\002\000\004\036\u0118\001\002\000\004\032\u0119\001" +
    "\002\000\030\006\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\025\uffc3\032\uffc3\037\uffc3\043\uffc3\044\uffc3\001" +
    "\002\000\024\006\013\007\014\010\131\012\133\013\135" +
    "\014\116\025\130\037\157\043\132\001\002\000\026\006" +
    "\013\007\014\010\131\012\133\013\135\014\116\025\130" +
    "\037\157\043\132\044\u011c\001\002\000\004\036\u011d\001" +
    "\002\000\006\045\u011f\046\u011e\001\002\000\004\047\u012b" +
    "\001\002\000\004\040\u0120\001\002\000\004\047\u0121\001" +
    "\002\000\024\006\013\007\014\010\131\012\133\013\135" +
    "\014\116\025\130\037\157\043\132\001\002\000\026\006" +
    "\013\007\014\010\131\012\133\013\135\014\116\025\130" +
    "\037\157\043\132\044\u0123\001\002\000\004\036\u0124\001" +
    "\002\000\004\046\u0125\001\002\000\004\047\u0126\001\002" +
    "\000\024\006\013\007\014\010\131\012\133\013\135\014" +
    "\116\025\130\037\157\043\132\001\002\000\026\006\013" +
    "\007\014\010\131\012\133\013\135\014\116\025\130\037" +
    "\157\043\132\044\u0128\001\002\000\004\036\u0129\001\002" +
    "\000\004\032\u012a\001\002\000\030\006\uffc2\007\uffc2\010" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\025\uffc2\032\uffc2\037\uffc2" +
    "\043\uffc2\044\uffc2\001\002\000\024\006\013\007\014\010" +
    "\131\012\133\013\135\014\116\025\130\037\157\043\132" +
    "\001\002\000\026\006\013\007\014\010\131\012\133\013" +
    "\135\014\116\025\130\037\157\043\132\044\u012d\001\002" +
    "\000\004\036\u012e\001\002\000\004\032\u012f\001\002\000" +
    "\030\006\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\025\uffc5\032\uffc5\037\uffc5\043\uffc5\044\uffc5\001\002\000" +
    "\010\026\142\027\140\037\143\001\002\000\004\030\u0132" +
    "\001\002\000\004\031\u0133\001\002\000\024\006\013\007" +
    "\014\010\131\012\133\013\135\014\116\025\130\037\157" +
    "\043\132\001\002\000\026\006\013\007\014\010\131\012" +
    "\133\013\135\014\116\025\130\032\u0135\037\157\043\132" +
    "\001\002\000\032\006\uffbf\007\uffbf\010\uffbf\011\u0136\012" +
    "\uffbf\013\uffbf\014\uffbf\025\uffbf\032\uffbf\037\uffbf\043\uffbf" +
    "\044\uffbf\001\002\000\004\031\u0137\001\002\000\024\006" +
    "\013\007\014\010\131\012\133\013\135\014\116\025\130" +
    "\037\157\043\132\001\002\000\026\006\013\007\014\010" +
    "\131\012\133\013\135\014\116\025\130\032\u0139\037\157" +
    "\043\132\001\002\000\030\006\uff9f\007\uff9f\010\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\025\uff9f\032\uff9f\037\uff9f\043\uff9f" +
    "\044\uff9f\001\002\000\006\030\uff97\036\uff97\001\002\000" +
    "\006\030\u013d\037\u013c\001\002\000\006\030\u0140\051\u013f" +
    "\001\002\000\004\036\u013e\001\002\000\026\006\ufff4\007" +
    "\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\025\ufff4\032\ufff4" +
    "\037\ufff4\043\ufff4\001\002\000\004\037\u0142\001\002\000" +
    "\004\036\u0141\001\002\000\026\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\025\ufff2\032\ufff2\037\ufff2\043" +
    "\ufff2\001\002\000\004\030\u0143\001\002\000\004\036\u0144" +
    "\001\002\000\026\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\025\ufff3\032\ufff3\037\ufff3\043\ufff3\001\002" +
    "\000\004\032\u0163\001\002\000\006\006\u0149\032\u0147\001" +
    "\002\000\004\002\ufff5\001\002\000\004\032\u0162\001\002" +
    "\000\004\037\u014a\001\002\000\004\027\u014b\001\002\000" +
    "\006\006\u014c\030\u014d\001\002\000\004\037\u0157\001\002" +
    "\000\004\031\u014e\001\002\000\024\006\u0150\007\014\010" +
    "\131\012\133\013\135\014\116\025\130\037\157\043\132" +
    "\001\002\000\026\006\013\007\014\010\131\012\133\013" +
    "\135\014\116\025\130\032\u0156\037\157\043\132\001\002" +
    "\000\006\025\036\037\u0155\001\002\000\026\006\013\007" +
    "\014\010\131\012\133\013\135\014\116\025\130\032\u0153" +
    "\037\157\043\132\001\002\000\026\006\013\007\014\010" +
    "\131\012\133\013\135\014\116\025\130\032\u0154\037\157" +
    "\043\132\001\002\000\026\006\uffeb\007\uffeb\010\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\025\uffeb\032\uffeb\037\uffeb\043\uffeb" +
    "\001\002\000\026\006\uffed\007\uffed\010\uffed\012\uffed\013" +
    "\uffed\014\uffed\025\uffed\032\uffed\037\uffed\043\uffed\001\002" +
    "\000\014\015\043\024\040\025\042\027\u014b\036\041\001" +
    "\002\000\026\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec" +
    "\014\uffec\025\uffec\032\uffec\037\uffec\043\uffec\001\002\000" +
    "\004\030\u0158\001\002\000\004\031\u0159\001\002\000\024" +
    "\006\u0150\007\014\010\131\012\133\013\135\014\116\025" +
    "\130\037\157\043\132\001\002\000\026\006\u0150\007\014" +
    "\010\131\012\133\013\135\014\116\025\130\032\u015f\037" +
    "\157\043\132\001\002\000\026\006\013\007\014\010\131" +
    "\012\133\013\135\014\116\025\130\032\u015d\037\157\043" +
    "\132\001\002\000\026\006\013\007\014\010\131\012\133" +
    "\013\135\014\116\025\130\032\u015e\037\157\043\132\001" +
    "\002\000\026\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee" +
    "\014\uffee\025\uffee\032\uffee\037\uffee\043\uffee\001\002\000" +
    "\026\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\025\ufff0\032\ufff0\037\ufff0\043\ufff0\001\002\000\026\006" +
    "\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\025\uffef" +
    "\032\uffef\037\uffef\043\uffef\001\002\000\004\032\u0161\001" +
    "\002\000\026\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\025\ufff1\032\ufff1\037\ufff1\043\ufff1\001\002\000" +
    "\004\002\ufff6\001\002\000\004\006\u0149\001\002\000\004" +
    "\032\u0165\001\002\000\004\002\ufff9\001\002\000\026\006" +
    "\013\007\014\010\131\012\133\013\135\014\116\025\130" +
    "\032\u016b\037\124\043\132\001\002\000\004\006\u0149\001" +
    "\002\000\004\032\u0169\001\002\000\004\002\ufff7\001\002" +
    "\000\004\032\u016e\001\002\000\004\006\u0149\001\002\000" +
    "\004\032\u016d\001\002\000\004\002\ufffa\001\002\000\004" +
    "\006\u0149\001\002\000\004\032\u0170\001\002\000\004\002" +
    "\ufff8\001\002\000\006\006\u0173\037\u0174\001\002\000\004" +
    "\030\u0183\001\002\000\004\037\u017c\001\002\000\004\015" +
    "\u0175\001\002\000\004\040\u0176\001\002\000\004\036\u0177" +
    "\001\002\000\010\026\142\027\140\037\143\001\002\000" +
    "\004\036\u0179\001\002\000\006\025\130\037\u017b\001\002" +
    "\000\004\030\uff9a\001\002\000\006\024\160\025\161\001" +
    "\002\000\004\015\u017d\001\002\000\004\040\u017e\001\002" +
    "\000\004\036\u017f\001\002\000\010\026\142\027\140\037" +
    "\143\001\002\000\004\036\u0181\001\002\000\006\025\130" +
    "\037\u017b\001\002\000\004\030\uff9b\001\002\000\004\031" +
    "\u0184\001\002\000\024\006\013\007\014\010\131\012\133" +
    "\013\135\014\116\025\130\037\157\043\132\001\002\000" +
    "\026\006\013\007\014\010\131\012\133\013\135\014\116" +
    "\025\130\032\u0186\037\157\043\132\001\002\000\030\006" +
    "\uff9c\007\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\025\uff9c" +
    "\032\uff9c\037\uff9c\043\uff9c\044\uff9c\001\002\000\004\006" +
    "\u0188\001\002\000\004\035\u0189\001\002\000\004\027\u018a" +
    "\001\002\000\004\030\u018b\001\002\000\004\031\u018c\001" +
    "\002\000\024\006\013\007\014\010\131\012\133\013\135" +
    "\014\116\025\130\037\124\043\132\001\002\000\026\006" +
    "\013\007\014\010\131\012\133\013\135\014\116\025\130" +
    "\032\u0198\037\157\043\132\001\002\000\026\006\013\007" +
    "\014\010\131\012\133\013\135\014\116\025\130\032\u0190" +
    "\037\124\043\132\001\002\000\004\032\u0194\001\002\000" +
    "\006\006\u0149\032\u0191\001\002\000\004\002\uffff\001\002" +
    "\000\004\032\u0193\001\002\000\004\002\000\001\002\000" +
    "\004\006\u0149\001\002\000\004\032\u0196\001\002\000\004" +
    "\002\ufffd\001\002\000\026\006\013\007\014\010\131\012" +
    "\133\013\135\014\116\025\130\032\u019c\037\124\043\132" +
    "\001\002\000\004\006\u0149\001\002\000\004\032\u019a\001" +
    "\002\000\004\002\ufffb\001\002\000\004\032\u019f\001\002" +
    "\000\004\006\u0149\001\002\000\004\032\u019e\001\002\000" +
    "\004\002\ufffe\001\002\000\004\006\u0149\001\002\000\004" +
    "\032\u01a1\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019f\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\120\004\121\005\133\006\124" +
    "\007\125\010\117\011\126\012\135\016\122\017\116\001" +
    "\001\000\002\001\001\000\024\003\u0165\004\121\005\133" +
    "\006\124\007\125\010\117\011\126\012\135\016\122\001" +
    "\001\000\002\001\001\000\024\004\163\005\171\006\165" +
    "\007\167\010\162\011\170\012\172\016\164\017\u0144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\155\004\121" +
    "\005\133\006\124\007\125\010\117\011\126\012\135\016" +
    "\122\001\001\000\022\004\163\005\171\006\165\007\167" +
    "\010\162\011\170\012\172\016\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\334\004\121\005\133\006" +
    "\124\007\125\010\117\011\126\012\135\016\122\001\001" +
    "\000\022\004\163\005\171\006\165\007\167\010\162\011" +
    "\170\012\172\016\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\356\004" +
    "\121\005\133\006\124\007\125\010\117\011\126\012\135" +
    "\016\122\001\001\000\022\004\163\005\171\006\165\007" +
    "\167\010\162\011\170\012\172\016\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\365\004\121\005\133" +
    "\006\124\007\125\010\117\011\126\012\135\016\122\001" +
    "\001\000\022\004\163\005\171\006\165\007\167\010\162" +
    "\011\170\012\172\016\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\372\004\121" +
    "\005\133\006\124\007\125\010\117\011\126\012\135\016" +
    "\122\001\001\000\022\004\163\005\171\006\165\007\167" +
    "\010\162\011\170\012\172\016\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\377" +
    "\004\121\005\133\006\124\007\125\010\117\011\126\012" +
    "\135\016\122\001\001\000\022\004\163\005\171\006\165" +
    "\007\167\010\162\011\170\012\172\016\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\u0104\004\121\005\133\006\124\007\125\010\117\011" +
    "\126\012\135\016\122\001\001\000\022\004\163\005\171" +
    "\006\165\007\167\010\162\011\170\012\172\016\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\u010b\004" +
    "\121\005\133\006\124\007\125\010\117\011\126\012\135" +
    "\016\122\001\001\000\022\004\163\005\171\006\165\007" +
    "\167\010\162\011\170\012\172\016\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\u0110\004\121\005\133\006\124\007\125\010\117\011\126" +
    "\012\135\016\122\001\001\000\022\004\163\005\171\006" +
    "\165\007\167\010\162\011\170\012\172\016\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\u0115\004\121\005\133\006\124\007\125\010\117" +
    "\011\126\012\135\016\122\001\001\000\022\004\163\005" +
    "\171\006\165\007\167\010\162\011\170\012\172\016\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\u011a\004\121\005\133\006\124\007\125" +
    "\010\117\011\126\012\135\016\122\001\001\000\022\004" +
    "\163\005\171\006\165\007\167\010\162\011\170\012\172" +
    "\016\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\u0121\004\121\005\133\006\124\007\125\010\117\011" +
    "\126\012\135\016\122\001\001\000\022\004\163\005\171" +
    "\006\165\007\167\010\162\011\170\012\172\016\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\u0126\004\121\005\133\006\124\007\125\010" +
    "\117\011\126\012\135\016\122\001\001\000\022\004\163" +
    "\005\171\006\165\007\167\010\162\011\170\012\172\016" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\u012b\004\121\005\133\006\124\007" +
    "\125\010\117\011\126\012\135\016\122\001\001\000\022" +
    "\004\163\005\171\006\165\007\167\010\162\011\170\012" +
    "\172\016\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\u0133\004\121\005\133" +
    "\006\124\007\125\010\117\011\126\012\135\016\122\001" +
    "\001\000\022\004\163\005\171\006\165\007\167\010\162" +
    "\011\170\012\172\016\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\u0137\004\121\005\133\006\124" +
    "\007\125\010\117\011\126\012\135\016\122\001\001\000" +
    "\022\004\163\005\171\006\165\007\167\010\162\011\170" +
    "\012\172\016\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\u014e\004\121\005\133\006\124\007\125" +
    "\010\117\011\126\012\135\015\u0150\016\122\001\001\000" +
    "\022\004\163\005\171\006\165\007\167\010\162\011\170" +
    "\012\172\016\164\001\001\000\002\001\001\000\024\003" +
    "\u0151\004\121\005\133\006\124\007\125\010\117\011\126" +
    "\012\135\016\122\001\001\000\022\004\163\005\171\006" +
    "\165\007\167\010\162\011\170\012\172\016\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\u0159\004\121\005\133\006\124\007\125\010\117\011" +
    "\126\012\135\015\u015a\016\122\001\001\000\024\004\163" +
    "\005\171\006\165\007\167\010\162\011\170\012\172\015" +
    "\u015f\016\164\001\001\000\024\003\u015b\004\121\005\133" +
    "\006\124\007\125\010\117\011\126\012\135\016\122\001" +
    "\001\000\022\004\163\005\171\006\165\007\167\010\162" +
    "\011\170\012\172\016\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0163\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\163\005\171" +
    "\006\165\007\167\010\162\011\170\012\172\016\164\017" +
    "\u0169\001\001\000\004\015\u0167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u016b\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u016e" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0177\001\001\000\002\001\001\000\004\005\u0179\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u017f\001\001" +
    "\000\002\001\001\000\004\005\u0181\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\u0184\004\121\005\133" +
    "\006\124\007\125\010\117\011\126\012\135\016\122\001" +
    "\001\000\022\004\163\005\171\006\165\007\167\010\162" +
    "\011\170\012\172\016\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\u018d\004\121\005" +
    "\133\006\124\007\125\010\117\011\126\012\135\016\122" +
    "\017\u018c\001\001\000\024\003\u0196\004\121\005\133\006" +
    "\124\007\125\010\117\011\126\012\135\016\122\001\001" +
    "\000\024\004\163\005\171\006\165\007\167\010\162\011" +
    "\170\012\172\016\164\017\u018e\001\001\000\002\001\001" +
    "\000\004\015\u0191\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u0194\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\163\005\171\006" +
    "\165\007\167\010\162\011\170\012\172\016\164\017\u019a" +
    "\001\001\000\004\015\u0198\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u019c\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u019f\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Identificador Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Identificador Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Identificador Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Identificador Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Identificador Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Numero Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Numero Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Numero Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Numero Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Numero Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Identificador Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Comillas Comillas Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Identificador Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Numero Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c Op_logico Parentesis_a Identificador Op_relacional Op_booleano Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a Case Comillas Comillas Dos_p SENTENCIA Break P_coma Case Numero Dos_p SENTENCIA Break P_coma Default Dos_p SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-23)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a Case Comillas Identificador Comillas Dos_p SENTENCIA Break P_coma Case Numero Dos_p SENTENCIA Break P_coma Default Dos_p SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-24)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a Case Numero Dos_p SENTENCIA Break P_coma Case Numero Dos_p SENTENCIA Break P_coma Default Dos_p SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-22)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a Case Comillas Comillas Dos_p SENTENCIA Break P_coma Default Dos_p SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a Case Comillas Identificador Comillas Dos_p SENTENCIA Break P_coma Default Dos_p SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-18)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a Case Numero Dos_p SENTENCIA Break P_coma Default Dos_p SENTENCIA Break P_coma Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Cadena Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= T_dato Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= T_dato Identificador Igual Identificador Modulo Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_dato Identificador Igual Identificador Division Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_dato Identificador Igual Identificador Multiplicacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= T_dato Identificador Igual Identificador Resta Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_dato Identificador Igual Identificador Suma Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= T_dato Identificador Igual Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= DECLARACION_FOR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA DECLARACION_FOR P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODO ::= T_dato Identificador Parentesis_a Parentesis_c Llave_a METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // METODO ::= T_dato Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METODO ::= T_dato Identificador Parentesis_a Parentesis_c Llave_a METODO SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // METODO ::= T_dato Identificador Parentesis_a T_dato Identificador Parentesis_c Llave_a METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // METODO ::= T_dato Identificador Parentesis_a T_dato Identificador Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // METODO ::= T_dato Identificador Parentesis_a T_dato Identificador Parentesis_c Llave_a METODO SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // METODO ::= T_dato Identificador Parentesis_a T_dato Identificador Parentesis_c Llave_a SENTENCIA METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LMETODO ::= Identificador Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LMETODO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LMETODO ::= Identificador Parentesis_a Identificador Coma Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LMETODO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LMETODO ::= Identificador Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LMETODO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= Identificador Llave_a Static T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= Identificador Llave_a Static T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= Identificador Llave_a Static T_dato Main Parentesis_a Parentesis_c Llave_a LMETODO Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= Identificador Llave_a Static T_dato Main Parentesis_a Parentesis_c Llave_a LMETODO SENTENCIA LMETODO Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Identificador Llave_a Static T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA LMETODO Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Identificador Llave_a Static T_dato Main Parentesis_a Parentesis_c Llave_a LMETODO SENTENCIA Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Identificador Llave_a DECLARACION Static T_dato Main Parentesis_a Parentesis_c Llave_a LMETODO Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Identificador Llave_a DECLARACION Static T_dato Main Parentesis_a Parentesis_c Llave_a LMETODO SENTENCIA LMETODO Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Identificador Llave_a DECLARACION Static T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA LMETODO Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Identificador Llave_a DECLARACION Static T_dato Main Parentesis_a Parentesis_c Llave_a LMETODO SENTENCIA Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Identificador Llave_a DECLARACION Static T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Identificador Llave_a DECLARACION Static T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c METODO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

